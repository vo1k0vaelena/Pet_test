import { test, expect } from '@playwright/test';

test.describe('Урок 2', () => {

test('Проверка url страницы авторизации', async({page})=>{
await page.goto('https://jpetstore.aspectran.com/account/signonForm')
await expect(page).toHaveURL('https://jpetstore.aspectran.com/account/signonForm')
})

test('Проверка наличия элементов на странице авторизации', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const panel = page.locator('[class="panel"]')
    await expect(panel).toBeVisible()
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
})

test('Валидные данные в полях авторизации', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    await username.type('j2ee')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    await password.type('j2ee')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const welcomeContent = page.locator('[id="WelcomeContent"]')
    await expect(welcomeContent).toBeVisible()
    await expect(welcomeContent).toHaveText('Welcome Janvi2356!')
})

test('Невалидные данные в полях авторизации', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    await username.type('j2ee1234')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    await password.type('j2ee12345')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})

test('Валидные данные в поле username, невалидные данные в поле password', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    await username.type('j2ee')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    await password.type('j2ee12345')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})

test('Невалидные данные в поле username, валидные данные в поле password', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    await username.type('j2ee1234')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    await password.type('j2ee')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})

test('Пустые поля авторизации', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})

test('Валидное поле username, пустое поле password', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    await username.type('j2ee')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})

test('Пустое поле username, валидное поле password', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    const username = page.locator('[name="username"]')
    await expect(username).toBeVisible()
    await username.click()
    await username.press('Control+A')
    await username.press('Backspace')
    const password = page.locator('[name="password"]')
    await expect(password).toBeVisible()
    await password.click()
    await password.press('Control+A')
    await password.press('Backspace')
    await password.type('j2ee')
    const button = page.locator('[class="button-bar"]')
    await expect(button).toBeVisible()
    await button.click()
    const panelFailed = page.locator('[class="panel failed"]')
    await expect(panelFailed).toBeVisible()
    await expect(panelFailed).toHaveText('Invalid username or password.  Signon failed.')
})
});

test.describe('Урок 3', () => {
    test('Селектор - текст', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/account/signonForm')
    await expect(page).toHaveURL('https://jpetstore.aspectran.com/account/signonForm')
    const fish = page.locator ('text=Fish').nth(0)
    await expect(fish).toBeVisible()
    const dogs = page.locator ('text=Dogs').nth(0)
    await expect(dogs).toBeVisible()
    const reptiles = page.locator ('text=Reptiles').nth(0)
    await expect(reptiles).toBeVisible()
    const cats = page.locator ('text=Cats').nth(0)
    await expect(cats).toBeVisible()
    const birds = page.locator ('text=Birds').nth(0)
    await expect(birds).toBeVisible()
    })

    test('Селектор - CSS', async({page})=>{
    await page.goto('https://jpetstore.aspectran.com/catalog/')
    await expect(page).toHaveURL('https://jpetstore.aspectran.com/catalog/')
    const quickLinksID = page.locator('#QuickLinks')
    await expect(quickLinksID).toBeVisible()
    const quickLinksClass = page.locator('.grid-container').nth(2)
    await expect(quickLinksClass).toBeVisible()
    })

    test('Селектор - фильтрация по тексту', async({page})=>{
        await page.goto('https://jpetstore.aspectran.com/account/signonForm')
        await expect(page).toHaveURL('https://jpetstore.aspectran.com/account/signonForm')
        const LoginButton = page.locator('.button-bar', {hasText: 'Login'})
        await expect(LoginButton).toBeVisible()
        })

        test('Селектор - фильтрация по другому локатору', async({page})=>{
            await page.goto('https://jpetstore.aspectran.com/account/signonForm')
            await expect(page).toHaveURL('https://jpetstore.aspectran.com/account/signonForm')
            const signonForm = page.locator('#Signon', {has: page.locator('[class="panel"]')})
            await expect(signonForm).toBeVisible()
            })

        test('Селектор - обращение к дочернему элементу', async({page})=>{
            await page.goto('https://jpetstore.aspectran.com/account/signonForm')
            await expect(page).toHaveURL('https://jpetstore.aspectran.com/account/signonForm')
            const header = page.locator('[id="Header"]>>[id="Menu"]')
            await expect(header).toBeVisible()
            })

})